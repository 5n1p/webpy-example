#!/usr/bin/python

import sys
import getopt
import string

sys.path.append( 'lib' )

import account

FIELD_WIDTH = {
  'id' : 5,
  'consumer_key' : 20,
  'consumer_secret' : 20,
}
FIELD_WIDTH_DEFAULT = 15

def parse_cmdline(argv):

  usage = """\
USAGE: account-review [OPTIONS] [username]
Available Options
  -h [ --help ]      Print this message
"""

  shortOpts = "h"
  longOpts = ['help']
  opts = ()
  args = ()

  account_info = {}
  account_info['username'] = ''

  try:
    opts,args = getopt.gnu_getopt(argv,shortOpts,longOpts)
  except getopt.GetoptError:
    sys.stderr.write(usage)
    sys.exit(1)

  for opt, val in opts:
    if opt in ('-h','--help'):
      print usage
      sys.exit(0)

  if len(args) == 1:
    account_info['username'] = args[0]

  return (account_info)

def print_header( headers ):
  for h in headers:
    fw = FIELD_WIDTH_DEFAULT
    if FIELD_WIDTH.has_key(h):
      fw = FIELD_WIDTH[h]
    print "%s" % ( string.capwords( h.replace('_',' ') ).ljust( fw ) ),
  print "\n",

if __name__ == "__main__":

  account_info = parse_cmdline(sys.argv[1:])

  if account_info['username']:
    json = account.review_account( account_info['username'] )

    if json['status'] == 'success':
      headers = json['account'].keys()
      headers.remove('id')
      headers.insert(0, 'id')

      for h in headers:
        print "%s: %s" % ( string.capwords( h.replace('_',' ') ).ljust( 20 ), json['account'][h] )

    else:
      print "No such account: %s" % ( account_info['username'] )

  else:
    json = account.review_account()
    headers = json['accounts'][0].keys()
    headers.remove('id')
    headers.insert(0, 'id')
    print_header( headers )

    for a in json['accounts']:
      for h in headers:
        fw = FIELD_WIDTH_DEFAULT
        if FIELD_WIDTH.has_key(h):
          fw = FIELD_WIDTH[h]
        if a.has_key(h):
          print "%s" % ( str( a[h] ).ljust( fw ) ),
        else:
          print "%s" % ( 'NULL'.ljust( fw ) ),
      print "\n",

# End
